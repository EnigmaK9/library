/home/enigma/github/homework-xhareni/book.cpp
-
/*
 * File: book.cpp
 * Description: Implementation of the Book constructor.
 * Creation Date: 2025-04-17
 * Last Modified: 2025-04-17
 * Necessary Files: book.h
 */

#include "book.h"

Book::Book(const std::string& title, const std::string& author, int id, bool isAvailable)
    : title(title), author(author), id(id), isAvailable(isAvailable) {}
-
/home/enigma/github/homework-xhareni/book.h
-
#ifndef BOOK_H
#define BOOK_H

#include <string>

/*
 * File: book.h
 * Description: Defines the Book structure for the library system.
 * Creation Date: 2025-04-17
 * Last Modified: 2025-04-17
 * Necessary Files: none
 */

struct Book {
    std::string title;    // Title of the book
    std::string author;   // Author of the book
    int id;               // Unique identifier for the book
    bool isAvailable;     // Availability status of the book

    // Constructor to initialize a Book object
    Book(const std::string& title, const std::string& author, int id, bool isAvailable = true);
};

#endif // BOOK_H
-
/home/enigma/github/homework-xhareni/generate_library.sh
-
#!/bin/bash
# Generates library.txt listing each fileâ€™s full path and its contents,
# separated by a line with a single dash.

output="library.txt"

# (Re)create/empty the output file
> "$output"

for file in *; do
  if [ -f "$file" ]; then
    # Print full path
    echo "$(pwd)/$file" >> "$output"
    # Separator
    echo "-" >> "$output"
    # Print file contents
    cat "$file" >> "$output"
    # Separator before next file
    echo "-" >> "$output"
  fi
done

-
/home/enigma/github/homework-xhareni/library.cpp
-
/*
 * File: library.cpp
 * Description: Implementation of the Library class methods.
 * Creation Date: 2025-04-17
 * Last Modified: 2025-04-17
 * Necessary Files: library.h, book.h, user.h
 */

#include "library.h"

bool Library::addUser(const User& user) {
    users.push_back(user);
    return true;
}

bool Library::addBook(const Book& book) {
    if (books.size() >= MAX_BOOKS) {
        return false;
    }
    books.push_back(book);
    return true;
}

bool Library::lendBook(int bookId, int userId) {
    for (auto& book : books) {
        if (book.id == bookId && book.isAvailable) {
            for (auto& user : users) {
                if (user.id == userId) {
                    book.isAvailable = false;
                    user.borrowedBookIds.push_back(bookId);
                    return true;
                }
            }
        }
    }
    return false;
}

bool Library::returnBook(int bookId, int userId) {
    for (auto& user : users) {
        if (user.id == userId) {
                auto it = std::find(user.borrowedBookIds.begin(), user.borrowedBookIds.end(), bookId);
                if (it != user.borrowedBookIds.end()) {
                    user.borrowedBookIds.erase(it);
                    for (auto& book : books) {
                        if (book.id == bookId) {
                            book.isAvailable = true;
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    int Library::countAvailableBooks() const {
        int count = 0;
        for (const auto& book : books) {
            if (book.isAvailable) {
                ++count;
            }
        }
        return count;
}

// function to search by author
std::vector<Book> Library::searchBooksByAuthor(const std::string& author) const {
    std::vector<Book> results;
    for (const auto& book : books) {
        if (book.author == author) {
            results.push_back(book);
        }
    }
    return results;
}

// function to calculate overdue fine
double Library::calculateFine(int daysLate) const {
    if (daysLate <= 0) return 0.0;
    return daysLate * LATE_FEE_PER_DAY;
}
-
/home/enigma/github/homework-xhareni/library.h
-
#ifndef LIBRARY_H
#define LIBRARY_H

#include <vector>
#include <algorithm>
#include "book.h"
#include "user.h"

/*
 * File: library.h
 * Description: Declaration of the Library class managing books and users.
 * Creation Date: 2025-04-17
 * Last Modified: 2025-04-17
 * Necessary Files: book.h, user.h, library.cpp
 */

const int MAX_BOOKS = 200; // Maximum number of books allowed in the library

class Library {
private:
    std::vector<Book> books; // Collection of books
    std::vector<User> users; // Collection of users
public:
    // Adds a user to the library
    bool addUser(const User& user);

    // Adds a book to the library. Returns false if capacity reached.
    bool addBook(const Book& book);

    // Lends a book to a user. Returns false if book unavailable or not found.
    bool lendBook(int bookId, int userId);

    // Returns a book from a user. Returns false if operation fails.
    bool returnBook(int bookId, int userId);

    // Counts and returns the number of available books.
    int countAvailableBooks() const;
};
    std::vector<Book> searchBooksByAuthor(const std::string& author) const;

    // calculate fine for a given number of late days
    double calculateFine(int daysLate) const;


#endif // LIBRARY_H
-
/home/enigma/github/homework-xhareni/library.txt
-
-
/home/enigma/github/homework-xhareni/main.cpp
-
/*
 * File: main.cpp
 * Description: Demonstrates the Library Management System usage.
 * Creation Date: 2025-04-17
 * Last Modified: 2025-04-17
 * Necessary Files: library.h, book.h, user.h, library.cpp, book.cpp, user.cpp
 */

#include <iostream>
#include "library.h"
#include "book.h"
#include "user.h"

int main() {
    Library library; // Create library instance

    // Create and add users
    User user1("Alice Smith", 1);
    User user2("Bob Johnson", 2);
    library.addUser(user1);
    library.addUser(user2);

    // Create and add books
    Book book1("1984", "George Orwell", 101);
    Book book2("To Kill a Mockingbird", "Harper Lee", 102);
    library.addBook(book1);
    library.addBook(book2);

    // Lend book 101 to user 1
    if (library.lendBook(101, 1)) {
        std::cout << "Book 101 lent to user 1." << std::endl;
    } else {
        std::cout << "Failed to lend book 101." << std::endl;
    }

    // Attempt to lend the same book again
    if (!library.lendBook(101, 2)) {
        std::cout << "Book 101 is not available for user 2." << std::endl;
    }

    // Return book 101 from user 1
    if (library.returnBook(101, 1)) {
        std::cout << "Book 101 returned by user 1." << std::endl;
    }

    // Count available books
    std::cout << "Available books: " << library.countAvailableBooks() << std::endl;

    return 0;
}
-
/home/enigma/github/homework-xhareni/README.md
-
# Library Management System

This program manages book loans and returns for a small library.
It allows adding books, lending and returning them, and counting available books.

## UML Diagram

```mermaid
classDiagram
    class Book {
        - title: string
        - author: string
        - id: int
        - isAvailable: bool
        + Book(title: string, author: string, id: int, isAvailable: bool)
    }
    class User {
        - name: string
        - id: int
        - borrowedBookIds: vector<int>
        + User(name: string, id: int)
    }
    class Library {
        - books: vector<Book>
        - users: vector<User>
        + addUser(user: User): bool
        + addBook(book: Book): bool
        + lendBook(bookId: int, userId: int): bool
        + returnBook(bookId: int, userId: int): bool
        + countAvailableBooks(): int
    }
    Book "1" *-- "0..*" Library : contains
    User "1" *-- "0..*" Library : members
    Library "1" o-- "0..*" Book : manages
    Library "1" o-- "0..*" User : manages
```

## Prerequisites

- Debian-based Linux distribution
- sudo privileges

## Installation

```bash
sudo apt update
sudo apt install -y build-essential
```

## File Structure

- book.h, book.cpp: Defines the Book structure.
- user.h, user.cpp: Defines the User structure.
- library.h, library.cpp: Declares and implements the Library class.
- main.cpp: Contains the main function demonstrating usage.
- README.md: Project documentation.

## Compilation

```bash
g++ -std=c++17 -o library main.cpp book.cpp user.cpp library.cpp
```

## Execution

```bash
./library

## Usage Examples

### Adding a Book

In main.cpp, add a book by calling:

library.addBook(Book("The Hobbit", "J.R.R. Tolkien", 103));

### Lending a Book

Lend a book to a user with:

if (library.lendBook(103, 1)) {
    std::cout << "Book 103 lent to user 1." << std::endl;
}

### Counting Available Books

Count and display available books:
-
/home/enigma/github/homework-xhareni/user.cpp
-
/*
 * File: user.cpp
 * Description: Implementation of the User constructor.
 * Creation Date: 2025-04-17
 * Last Modified: 2025-04-17
 * Necessary Files: user.h
 */

#include "user.h"

User::User(const std::string& name, int id) : name(name), id(id) {}
-
/home/enigma/github/homework-xhareni/user.h
-
#ifndef USER_H
#define USER_H

#include <vector>
#include "book.h"

/*
 * File: user.h
 * Description: Defines the User structure for the library system.
 * Creation Date: 2025-04-17
 * Last Modified: 2025-04-17
 * Necessary Files: book.h
 */

struct User {
    std::string name;              // Name of the user
    int id;                        // Unique identifier for the user
    std::vector<int> borrowedBookIds; // List of borrowed book IDs

    // Constructor to initialize a User object
    User(const std::string& name, int id);
};

#endif // USER_H
-
